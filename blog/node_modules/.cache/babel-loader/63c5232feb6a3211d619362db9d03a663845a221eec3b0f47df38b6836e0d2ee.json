{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\n\n// This function is run upon opening any page in the blog to check if token is present or not and if it's present, is it valid or expired\nconst useAuth = () => {\n  _s();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    // If token is not present, navigates to login page\n    if (!token) {\n      navigate('/');\n    } else {\n      // If token is present, decodes the token and checks the expiration time\n      try {\n        const decodedToken = jwtDecode(token);\n        // convert seconds to milliseconds\n        const expirationTime = decodedToken.exp * 1000;\n        if (Date.now() > expirationTime) {\n          // If expires, remove token and username from local storage and navigate to login page\n          localStorage.removeItem('token');\n          localStorage.removeItem('username');\n          navigate('/');\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }, [navigate]);\n  return;\n};\n_s(useAuth, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\nexport default useAuth;","map":{"version":3,"names":["useEffect","useNavigate","jwtDecode","useAuth","_s","navigate","token","localStorage","getItem","decodedToken","expirationTime","exp","Date","now","removeItem","err","console","error"],"sources":["C:/Users/SATHI220632/Downloads/Blog/blog/src/functions/FUNCTION_auth.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\n// This function is run upon opening any page in the blog to check if token is present or not and if it's present, is it valid or expired\r\nconst useAuth = () => {\r\n    const navigate = useNavigate()\r\n    \r\n    useEffect(()=>{\r\n        const token = localStorage.getItem('token')\r\n\r\n        // If token is not present, navigates to login page\r\n        if (!token) {\r\n            navigate('/')\r\n        } else {\r\n            // If token is present, decodes the token and checks the expiration time\r\n            try {\r\n                const decodedToken = jwtDecode(token)\r\n                // convert seconds to milliseconds\r\n                const expirationTime = decodedToken.exp * 1000\r\n    \r\n                if (Date.now() > expirationTime) {\r\n                    // If expires, remove token and username from local storage and navigate to login page\r\n                    localStorage.removeItem('token')\r\n                    localStorage.removeItem('username')\r\n                    navigate('/')\r\n                }\r\n            } catch (err) {\r\n                console.error(err)\r\n            }\r\n        }\r\n    }, [navigate])\r\n\r\n    return\r\n}\r\n\r\nexport default useAuth"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,YAAY;;AAEtC;AACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAI;IACV,MAAMM,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;IAE3C;IACA,IAAI,CAACF,KAAK,EAAE;MACRD,QAAQ,CAAC,GAAG,CAAC;IACjB,CAAC,MAAM;MACH;MACA,IAAI;QACA,MAAMI,YAAY,GAAGP,SAAS,CAACI,KAAK,CAAC;QACrC;QACA,MAAMI,cAAc,GAAGD,YAAY,CAACE,GAAG,GAAG,IAAI;QAE9C,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,cAAc,EAAE;UAC7B;UACAH,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;UAChCP,YAAY,CAACO,UAAU,CAAC,UAAU,CAAC;UACnCT,QAAQ,CAAC,GAAG,CAAC;QACjB;MACJ,CAAC,CAAC,OAAOU,GAAG,EAAE;QACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MACtB;IACJ;EACJ,CAAC,EAAE,CAACV,QAAQ,CAAC,CAAC;EAEd;AACJ,CAAC;AAAAD,EAAA,CA7BKD,OAAO;EAAA,QACQF,WAAW;AAAA;AA8BhC,eAAeE,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}